{
  "author": {
    "name": "Ramesh Perumalsamy"
  },
  "contributors": [
    {
      "name": "Mark Kimsal"
    }
  ],
  "name": "statsd-elasticsearch-backend",
  "description": "A StatsD backend for Elasticsearch",
  "version": "0.3.0",
  "homepage": "https://github.com/markkimsal/statsd-elasticsearch-backend",
  "repository": {
    "type": "git",
    "url": "git://github.com/markkkimsal/statsd-elasticsearch-backend.git"
  },
  "keywords": [
    "elasticsearch",
    "metrics",
    "statsd"
  ],
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "named-regexp": "^0.1.1"
  },
  "devDependencies": {},
  "main": "lib/elasticsearch.js",
  "gitHead": "d958fa5dd6d3861f90c3f977868be4cd50be8561",
  "readme": "statsd-elasticsearch-backend\n============================\n\nElasticsearch backend for statsd\n\n## Overview\n\nThis backend allows [Statsd][statsd] to save to [Elasticsearch][elasticsearch].  Supports dynamic index creation per day and follows the logstash naming convention of statsd-YYYY.MM.DD for index creation.\n\n## History \n\nOriginally written by Github user rameshpy, this library was created as a feature branch of etsy/statsd.  The statsd project recommended that this library be converted to its own repository as all other backends currently do.  This repository started as a restructuring of the existing feature branch into a standalone backend repository.\n\n## Installation\n\n    $ cd /path/to/statsd\n    $ npm install git://github.com/markkimsal/statsd-elasticsearch-backend.git\n    \nTo install from behind a proxy server:\n\n    $ export https_proxy=http://your.proxyserver.org:8080\n    $ export http_proxy=http://your.proxyserver.org:8080\n    $ cd /path/to/statsd\n    $ npm install git+https://github.com/markkimsal/statsd-elasticsearch-backend.git\n\n\n## Configuration\n\nMerge the following configuration into your top-level existing configuration.\nAdd a structure to your configuration called \"elasticsearch\"\n\n```js\n\n backends: [ 'statsd-elasticsearch-backend', 'other-backends'],\n debug: true,\n elasticsearch: {\n\t port:          9200,\n\t host:          \"localhost\",\n\t path:          \"/\",\n\t indexPrefix:   \"statsd\",\n\t //indexTimestamp: \"year\",  //for index statsd-2015 \n\t //indexTimestamp: \"month\", //for index statsd-2015.01\n\t indexTimestamp: \"day\",     //for index statsd-2015.01.01\n\t countType:     \"counter\",\n\t timerType:     \"timer\",\n\t timerDataType: \"timer_data\",\n\t gaugeDataType: \"gauge\",\n     formatter:     \"default_format\"\n }\n```\n\nThe field _path_ is equal to \"/\" if you directly connect to ES. \nBut when ES is on behind the proxy (nginx,haproxy), for example http://domain.com/elastic-proxy/, then following settings required:\n```\n    port: 80,\n    host: \"domain.com\",\n    path: \"/elastic-proxy/\",\n```\nNginx config proxy example:\n```\n    location /elastic-proxy/ {\n        proxy_pass http://localhost:9200/;\n    }\n```\n\nThe field _indexPrefix_ is used as the prefix for your dynamic indices: for example \"statsd-2014.02.04\"\n\nThe field _indexTimestamp_ allows you to determine the timestamping for your dynamic index. \"year\", \"month\" and \"day\" would produce \"statsd-2014\", \"statsd-2014.02\", \"statsd-2014.02.04\" respectively.\n\nThe type configuration options allow you to specify different elasticsearch \\_types for each statsd measurement.\n\n## Important upgrade from 0.2 to 0.3\n\nPreviously, the config value for timerDataType was always ignored and timer data was alwasy saved as the timerType + '\\_stats'.  If you are upgrading a live instance from 0.2 please be aware that the value of timerDataType will now be respected and you should ensure that you have the proper type mappings (especially for @timestamp) or that your timerDataType is set to timerType + '\\_stats'.\n\nIn addition to the above, the value of timerDataType was always overwriting timerData, so all timer information was being saved to the type \"timer\\_data\" when the sample configuration would lead you to believe that it was being saved to the type \"timer\".\n\nIn summary, the ES \\_types of \"timer_data\" and \"timer_data_stats\" will now be \"timer\" and \"timer_data\" if the sample configuration is used.\n\n## Template Mapping (basically required)\n\nTo configure Elasticsearch to automatically apply index template settings based on a naming pattern look at the es-index-template.sh file.  It will probably need customization (the timer_data type) for your particular statsd configuration (re: threshold pct and bins).\n\nFrom your etc/statsd installation type the following to get the basic template mapping\n```\nsh  node_modules/statsd-elasticsearch-backend/es-index-template.sh\n```\nWithout this, your timestamps will not be interpreted as timestamps.\n\n## Test your installation\n\nSend a UDP packet that statsd understands with netcat.\n\n```\necho \"accounts.authentication.password.failed:1|c\" | nc -u -w0 127.0.0.1 8125\necho \"accounts.authentication.login.time:320|ms|@0.1\" | nc -u -w0 127.0.0.1 8125\necho \"accounts.authentication.login.num_users:333|g\" | nc -u -w0 127.0.0.1 8125\necho \"accounts.authentication.login.num_users:-10|g\" | nc -u -w0 127.0.0.1 8125\n```\n\n## Default Metric Name Mapping\n\nEach key sent to the elasticsearch backend will be broken up by dots (.) and each part of the key will be treated as a document property in elastic search.  The first for keys will be treated as namespace, group, target, and action, with any remaining keys concatenated into the \"action\" key with dots.\nFor example:\n\n```js\naccounts.authentication.password.failure.count:1|c\n```\n\nThe above would be mapped into a JSON document like this:\n```js\n{\n\t\"_type\":\"counter\",\n\t\"ns\":\"accounts\",\n\t\"grp\":\"authentication\",\n\t\"tgt\":\"password\",\n\t\"act\":\"failure.count\",\n\t\"val\":\"1\",\n\t\"@timestamp\":\"1393853783000\"\n}\n```\n\nCurrently the keys are hardcoded to: namespace, group, target, and action, as in the above example.  Having configurable naming conventions is the goal of a 1.0 release.\nThe idea for mapping came mostly from: [http://matt.aimonetti.net/posts/2013/06/26/practical-guide-to-graphite-monitoring/]\n\n## Configurable Metric Formatters\n\nAs of 0.4.0 you can now choose to use from a selection of metric key formatters or write your own.\n\nThe config value _formatter_ will resolve to the name of a file under lib/ with a .js extension added to it.\n\n````\nformatter:  my_own_format  # this will require ('lib/' + 'my_own_format' + '.js);\n```\nIn this module you will need to export a number of functions.  The 4 that are supported right now are:\n```\ncounters( key, value, ts, array )\ntimers( key, value, ts, array )\ntimer_data( key, value, ts, array )\ngauges( key, value, ts, array )\n```\n\nLook at lib/default\\_format.js for a template to build your own.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/markkkimsal/statsd-elasticsearch-backend/issues"
  },
  "_id": "statsd-elasticsearch-backend@0.3.0",
  "_shasum": "1bae4719ecb33b69eaefdcde21d59d013c0e58d1",
  "_from": "git://github.com/markkimsal/statsd-elasticsearch-backend.git",
  "_resolved": "git://github.com/markkimsal/statsd-elasticsearch-backend.git#d958fa5dd6d3861f90c3f977868be4cd50be8561"
}
